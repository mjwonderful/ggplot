{
    "contents" : "require(ggplot2)\nqplot(x, y = NULL, ..., data, facets = NULL, margins = FALSE, geom = \"auto\", stat = list(NULL), position = list(NULL), xlim = c(NA, NA), ylim = c(NA, NA), log = \"\", main = NULL, xlab = deparse(substitute(x)), ylab = deparse(substitute(y)), asp = NA)\n\n\ndata(diamonds)\ndsmall <- diamonds[sample(nrow(diamonds), 1000), ]\nhead(dsmall)\n\nqplot(carat,price,data=dsmall,color=I(\"red\"),shape=cut) # I()表示手动设定图形属性\nqplot(log(carat),log(price),data=dsmall,alpha=I(1/10)) #alpha表示透明度\nqplot(carat,x*y*x,data=dsmall)\n\n#二维变量\ngeom = \"point\" #指定x、y时 默认输出散点图 \"jitter\"是另一种散点图（扰动点图）\ngeom = \"smooth\" #平滑曲线\ngeom = \"boxplot\" #箱线图\ngeom = \"path\" 和 geom = \"line\" #在数据点之间绘制连线\n\n#对于连续变量\ngeom = \"histogram\" #直方图\ngeom = \"freqploy\" #绘制频率多边形\ngeom = \"density\" #绘制密度曲线\n只指定x，默认输出直方图\n\n#对于离散变量\ngeom = \"bar\"  #绘制柱状图\n\nqplot(carat,price,data=dsmall,geom=c(\"point\",\"smooth\"),span=0.5) #span控制平滑度\nqplot(carat,price,data=dsmall,geom=c(\"point\",\"smooth\"),method=\"lm\") #线性模型拟合\nqplot(carat,price,data=dsmall,geom=c(\"point\",\"smooth\"),method=\"lm\",formula=y~ns(x,5)) #多项式拟合，第二个参数表示自由度，越大曲线波动越大\n\nqplot(color,price/carat,data=dsmall,geom=\"jitter\") #扰动点图\n\nqplot(carat, data=dsmall,geom=\"histogram\",binwidth=0.1) #binwidth设定组距，控制平滑度\n\nqplot(carat, data=dsmall,geom=\"density\",color=color) #颜色\nqplot(carat, data=dsmall,geom=\"histogram\",fill=color) #填充\n\n\nqplot(date,unemploy/pop, data=economics,geom=\"line\")\nqplot(date,unemploy, data=economics,geom=\"line\")\n\n\nyear<- function(x) as.POSIXlt(x)$year+1900  #日期时间转换功能,从1900年起，>as.POSIXlt(\"1899-01-02\")$year  >1\nqplot( unemploy/pop,uempmed, data=economics,geom=c(\"point\",\"line\"))\nqplot( unemploy/pop,uempmed, data=economics,geom=\"path\",color=year(date))\n\n#分面\nqplot(carat, data=dsmall,facets= color ~ ., geom=\"histogram\",binwidth=0.1,xlim=c(0,3)) #分组计数   .表示占位符，指定一行或一列\nqplot(carat,..density.., data=dsmall,facets= color ~ ., geom=\"histogram\",binwidth=0.1,xlim=c(0,3))  #密度   \n\n\n----------------------------------------------------------------------------------------------------\n  head(mpg)\nqplot(displ,hwy,data=mpg,color=cyl) #同种颜色深浅\np<- qplot(displ,hwy,data=mpg,color=factor(cyl)) #不同颜色\n\n#查看结构\nsummary(p)\n#保存图片\nsave(p,file=\"plot.rdata\")\nload(\"plot.rdata\")\nggsave(\"plot.png\",width=5,height=5)\n\n----------------------------------------------------------------------------------------------------\n  require(ggplot2)\np<- ggplot(dsmall,aes(carat,price,color=cut))\n\np<- p+layer(geom=\"point\") #添加一个图层\n# layer(geom,geom_params,stat,stat_params,data,mapping,position) layer的参数\n\n\ngeom_histogram(binwidth=2,fill=\"stellblue\")\n\n#快捷函数\ngeom_XXX(mapping,data,...,stat,position)\nstat_XXX(mapping,data,...,geom,position)\nmapping:一组图形属性映射，通过aes()控制\n\n\nggplot(msleep,aes(sleep_rem/sleep_total,awake))+geom_point() #等价于\nqplot(sleep_rem/sleep_total,awake,data=msleep)\n\nqplot(sleep_rem/sleep_total,awake,data=msleep)+geom_smooth() #等价于\nqplot(sleep_rem/sleep_total,awake,data=msleep,geom=c(\"point\",\"smooth\")) #也等价于\np<- ggplot(msleep,aes(sleep_rem/sleep_total,awake))+geom_point()+geom_smooth()\n\nsummary(p) #不画出图形，查看图形对象结构\n\n#将图层保存为变量，多次使用\nbestfit<-geom_smooth(method=\"lm\",se=F,color=alpha(\"steelblue\",0.5),size=2)\nqplot(sleep_rem,sleep_total,data=msleep)+bestfit\nqplot(awake,brainwt,data=msleep,log=\"y\")+bestfit\nqplot(bodywt,brainwt,data=msleep,log=\"xy\")+bestfit\n\np<-ggplot(mtcars,aes(mpg,wt,color=cyl))+geom_point()\nmtcarss<-transform(mtcars,mpg=mpg^2)\np %+% mtcarss #更换数据集 用 %+%\n\n\n\np<-ggplot(mtcars,aes(mpg,wt))\np+geom_point()\np+geom_point(aes(color=factor(cyl))) #添加 相当于aes(mpg,wt,color=cyl)\np+geom_point(aes(y=disp)) #修改 相当于aes(mpg,disp)\n\n#设定和映射的区别\np+geom_point(color=\"darkblue\") #将参数设定成一个特定值\np+geom_point(aes(color=\"darkblue\")) #只是创建了一个\"darkblue\"的变量，然后将color映射到这个变量上,这个变量是离散型的，用色轮上等间距的颜色，又因为只有一个值，所以是桃红色\nqplot(mpg,wt,data=mtcars,color=I(\"darkblue\")) #qplot可以用I()来实现映射\n\nrequire(nlme)\nhead(Oxboys)\n#分组\np<-ggplot(Oxboys,aes(age,height,group=Subject))+geom_line() #指定了分组\nggplot(Oxboys,aes(age,height))+geom_line() #未指定分组 相当于group=1\n\n#不同图层上的不同分组\np+geom_smooth(aes(group=Subject),method=\"lm\",se=F) #给每个都加了一条光滑线条\np+geom_smooth(aes(group=1),method=\"lm\",se=F) #基于整体的一条光滑线条\n\n\nboysbox<- ggplot(Oxboys,aes(Occasion,height))+geom_boxplot()\nboysbox+geom_line(aes(group=Subject),color=\"#3366FF\")\n\n\n\nggplot(dsmall,aes(carat))+geom_histogram(aes(y=..density..),binwidth=0.1)\n#生成变量的名字要用.. ..围起来，防止生成的变量和原始变量混淆\n#等同于\nqplot(carat,..density..,data=dsmall,geom=\"histogram\",binwidth=0.1)\n#density 表示每个观测值的密度（占整体的百分比/组宽）\n\n#位置调整\np <- ggplot(data=mpg,aes(x=class,fill=factor(year)))\np + geom_bar(position='dodge')\np + geom_bar(position='stack')\np + geom_bar(position='fill')\np + geom_bar(position='identity',alpha=0.3)\n\n\n#结合几何对象和统计变换\nd<- ggplot(diamonds,aes(carat))+xlim(0,3)\nd + stat_bin(aes(ymax=..count..),binwidth=0.1,geom=\"area\")\nd + stat_bin(aes(size=..density..),binwidth=0.1,geom=\"point\",positin=\"identity\")\n\n---------------------------------------------------------------------------------------\n  df<- data.frame(x=c(3,1,5),y=c(2,4,6),label=c(\"a\",\"b\",\"c\"))\n\nrequire(gridExtra)\np<- ggplot(df,aes(x,y))+xlab(NULL)+ylab(NULL)\np1<- p + geom_point() +labs(title=\"geom_point\")  #散点图#\np2<- p + geom_bar(stat=\"identity\")+labs(title=\"geom_bar(stat=\\\"identity\\\")\") #条形图\np3<- p + geom_line() + labs(title=\"geom_line\") #线条图\np4<- p + geom_area() + labs(title=\"geom_area\") #面积图\np5<- p + geom_path() + labs(title=\"geom_path\") #路径图\np6<- p + geom_text(aes(label=label)) + labs(title=\"geom_text\") # 含标签的散点图\np7<- p + geom_tile() + labs(title=\"geom_tile\") #色深图/水平图\np8<- p + geom_polygon() + labs(title=\"geom_polygon\") #多边形图\ngrid.arrange(p1,p2,p3,p4,p5,p6,p7,p8,ncol=2) #在两列展示\n\nhead(diamonds)\ndepth_dist <- ggplot(diamonds,aes(depth))+xlim(58,68)\ndepth_dist + geom_histogram(aes(y=..density..),binwidth=0.1)+facet_grid(cut ~ .) #按cut分组绘制多个直方图\ndepth_dist + geom_histogram(aes(fill=cut),binwidth=0.1,position=\"fill\") #频率多边形图\ndepth_dist + geom_freqpoly(aes(y=..density..,color=cut),binwidth=0.1) #条件密度图\n\n\nqplot(cut,depth,data=diamonds,geom=\"boxplot\")\nqplot(carat,depth,data=diamonds,geom=\"boxplot\"),group=round_any(carat,0.1,floor),xlim=c(0.3))\n\nqplot(class,cty,data=mpg,geom=\"jitter\")\nqplot(class,drv,data=mpg,geom=\"jitter\")\n\nqplot(depth,data=diamonds,geom=\"density\",xlim=c(54,70))\nqplot(depth,data=diamonds,geom=\"density\",xlim=c(54,70),fill=cut,alpha=I(0.2))\n\n\n#处理遮盖绘制问题\ndf<- data.frame(x=rnorm(2000),y=rnorm(2000))\nnorm<-ggplot(df,aes(x,y))\nnorm + geom_point()\nnorm + geom_point(shape =1 ) #中空的点\nnorm + geom_point(shape = \".\") #点的大小为像素级\n\nnorm + geom_point(color=\"black\",alpha=1/30)\n\ntd<-ggplot(diamonds,aes(table,depth))+xlim(50,70)+ylim(50,70)\ntd + geom_point() #不做处理\ntd + geom_jitter() #使用默认扰动参数\njit <- position_jitter(width=0.5)\ntd+ geom_jitter(position= jit) #横向扰动参数为0.5\ntd+ geom_jitter(position= jit,color=\"black\",alpha=1/10) #横向扰动参数为0.5且透明度为1/10\ntd+ geom_jitter(position= jit,color=\"black\",alpha=1/50)\ntd+ geom_jitter(position= jit,color=\"black\",alpha=1/200)\n\n----------------------------------------------------------------------------------------\n  #添加图形注解\n  unemp<- qplot(date,unemploy,data=economics,geom=\"line\",xxlab=\"\",ylab=\"No. unemployed(1000s)\")\n\nhead(presidential)\n\npresidential<- presidential[-(1:3),]   \nyrng <- range(economics$unemploy)\nxrng <- range(economics$date)\nunemp+ geom_vline(aes(xintercept= as.numeric(start)),data=presidential) #vline 添加垂直线 xintercept表示取x的值,取了presidential数据集的年份，用来获取各个总统的任期年份\n\nlibrary(scales)\nunemp + geom_rect(aes(NULL,NULL,xmin=start,xmax=end,fill=party),ymin=yrng[1],ymax=yrng[2],data=presidential,alpha=0.2)+scale_fill_manual(values=c(\"blue\",\"red\")) #强调图形中感兴趣的矩形区域\n\nlast_plot()+geom_text(aes(x=start,y=yrng[2],label=name),data=presidential,size=5,hjust=0,vjust=0)#last()是调用最近的一副图; geom_text添加文字叙述或点的标签;  vjust和hjust是对图中文字label位置的设置 ; 水平(Horizontal)垂直(vertical); size控制文本的大小\n\ncaption <- paste(strwrap(\"Unemploymen rates in the US have varied alot over the years\",40),collapse=\"\\n\") #strwrap()把一个字符串当成一个段落的文字 40控制了每行的字符数\nunemp+geom_text(aes(x,y,label=caption),data=data.frame(x=xrng[2],y=yrng[2]),hjust=1,vjust=1,,size=5)\n\nhighest<- subset(economics,unemploy==max(unemploy))\nlowest<- subset(economics,unemploy==min(unemploy))\nunemp+geom_point(data=highest,size=3,color=\"red\",alpha=0.5)+geom_point(data=lowest,size=3,color=\"blue\",alpha=0.8) #标注最大值、最小值\n\n\n# geom_text 可添加文字叙述或为点添加标签\n# geom_vline,geom_hline:向图片添加垂直线或水平线\n# geom_abline:向图形添加任意斜率和截距的直线\n# geom_rect:强调图形中感兴趣的矩形区域，有xmin,xmax,ymin,ymax几种图形属性\n# geom_line,geom_path,geom_segemt:添加直线 都有一个arrow参数，可以用来在线上放置一个箭头，arrow()函数有angle,length,ends及type几个参数\n\n\n---------------------------------------------------------------------------------------------------------\n  ###标度 位置标度 颜色标度 手动标度 同一类型标度\n  p <- qplot(sleep_total,sleep_cycle,data=msleep,color=vore)\np + scale_color_hue() #显示添加默认标度\np + scale_color_hue(\"What does\\nit eat?\",  \n                    breaks = c(\"herbi\",\"carni\",\"omni\",NA),\n                    labels = c(\"plants\",\"meat\",\"both\",\"don't know\")) #修改默认标度的参数，这里改变了图例的外观\np + scale_color_brewer(palette = \"Set1\") #使用一种不同的标度\n\n##通用参数\n# name:设置坐标轴或图例上的标签，用\\n换行\np <- qplot(cty,hwy,data=mpg,color=displ)\np + scale_x_continuous(\"City mpg\")\np + xlab(\"City mpg\")\np + ylab(\"Highway mpg\")\np + labs(x=\"City mpg\", y=\"Highway\",color=\"Displacement\")\np + xlab(expression(frac(miles,gallon))) #frac()表示分数线\n\n#limits:固定标度的定义域，影响显示在图形上的元素\n#breaks:控制显示在坐标轴或图例上的值\n#labels:指定了应在断点处显示标签，若设置了labels，必须同时指定breaks\n\np <- qplot(cyl,wt,data=mtcars)\np + scale_x_continuous(breaks=c(5.5,6.5)) #坐标轴标注变化，断的位置变了\np + scale_x_continuous(limits=c(5.5,6.5)) #选取的数据变化，数据被限制了\np <- qplot(wt,cyl,data=mtcars,color=cyl)\np + scale_color_gradient(breaks=c(5.5,6.5)) #图例的标注变化，段的位置变了\np + scale_color_gradient(limits=c(5.5,6.5)) #选取的数据变化，数据被限制了\n\n#formatter:如果未指定任何标签，则在每个断电出自动调用格式刷来格式化生成标签。连续性标度，comma,percent,dollar,scientific;离散型标度， abbreviate\n\n##标度位置\nqplot(log10(carat),log10(price),data=diamonds) #对数据进行对数变换\nqplot(carat,price,data=diamonds)+scale_x_log10()+scale_y_log10() #对标度进行对数变换\n#两幅图图形相同，坐标轴标签不同\n\nplot <- qplot(date,psavert,data=economics,geom=\"line\")+\n  ylab(\"Personal savings rate\")+\n  geom_hline(yintercept=0, color=\"grey50\") #hline表示横线 yintercept取y的值\nplot + scale_x_date(breaks=date_breaks(\"10 years\")) #按10年分段\nplot + scale_x_date(limits= as.Date(c(\"2004-01-01\",\"2005-01-01\")),labels=date_format(\"%Y-%m-%d\"))\n\n\n##颜色标度\npoint <- qplot(brainwt,bodywt,data=msleep,log=\"xy\",color=vore)\narea <- qplot(log10(brainwt),data=msleep,fill=vore,binwidth=1)\npoint + scale_color_brewer(palette=\"Set1\")\npoint + scale_color_brewer(palette=\"Set2\")\npoint + scale_color_brewer(palette=\"Pastel1\")\n\narea + scale_fill_brewer(palette=\"Set1\")\narea + scale_fill_brewer(palette=\"Set2\")\narea + scale_fill_brewer(palette=\"Pastel1\")\n\n\n#手动离散标度\nplot <- qplot(brainwt,bodywt,data=msleep,log=\"xy\")\nplot + aes(color=vore)+scale_color_manual(values=c(\"red\",\"orange\",\"yellow\",\"green\",\"blue\")) #为变量vore的每个值赋一个颜色\ncolors <- c(carni=\"red\",\"NA\"=\"orange\",insecti=\"yellow\",herbi=\"green\",omni=\"blue\") #一一对应颜色\nplot + aes(color=vore)+scale_color_manual(values=colors)\nplot + aes(shape=vore)+scale_shape_manual(values=c(1,2,6,0,23)) #设置形状\n\nhuron <- data.frame(year= 1875:1972,level=LakeHuron)\nggplot(huron,aes(year))+\n  geom_line(aes(y=level-5),color=\"blue\")+\n  geom_line(aes(y=level+5),color=\"red\") #并不知道这两条线代表什么\n\nggplot(huron,aes(year))+\n  geom_line(aes(y=level-5,color=\"below\"))+\n  geom_line(aes(y=level+5,color=\"above\"))+\n  scale_color_manual(\"Direction\",values=c(\"below\"=\"blue\",\"above\"=\"red\")) #添加了一个图例\n\n-----------------------------------------------------------------------------------------------------------------------\n  ###定位\n  ##分面\n  #网格型 facet_grid 封装型 facet_wrap\n  #在qplot()中，2维分面使用facet_grid，一维分面使用facet_wrap\n  \n  #网格分面\n  mpg2 <- subset(mpg,cyl!=5 & drv %in% c(\"4\",\"f\"))\nqplot(cty,hwy,data=mpg2)+facet_null()\nqplot(cty,hwy,data=mpg2)+facet_grid(.~cyl) #一列多行\" . ~ a \"\nqplot(cty,data=mpg2,geom=\"histogram\",binwidth=2)+facet_grid( cyl~. ) #一列多行 \"a ~ .\"\nqplot(cty,hwy,data=mpg2)+facet_grid(drv~cyl) #多行多列 \"a ~ b\"\n\n#边际图\np <- qplot(displ,hwy,data=mpg2)+geom_smooth(method=\"lm\",se=F)\np + facet_grid(drv~cyl)\np + facet_grid(drv~cyl,margin=T) #margin=T表示所有边际图，margins=c(\"sex\",\"age\")表示指定的变量名称，grand_row或grand_col表示所有的行或列的边际图\n\nqplot(displ,hwy,data=mpg2)+geom_smooth(aes(color=drv),method=\"lm\",se=F)+facet_grid(drv~cyl,margin=T)\n\n#封装分面\nmovies$decade <- round_any(movies$year,10,floor)\nqplot(rating,..density..,data=subset(movies,decade >1980),geom=\"histogram\",binwidth=0.5)+facet_wrap(~deacde,ncol=6)\n\n#标度控制\n#对应两种分面，可以通过调整参数scales来控制面板的位置标度是相同（固定）还是允许变化（自由）\nsacles=\"fixed\":x和y的标度在所有面板中都相同scakes=\"free\":x和y的标度在每个面板都可以变化\nscakes=\"free_x\":x的标度可以变，y固定\nscakes=\"free_y\":y的标度可变，x固定\n\np <- qplot(cty,hwy,data=mpg)\np + facet_wrap( ~ cyl)\np + facet_wrap( ~cyl,scales=\"free\") #x、y均可变\n\nlibrary(reshape2)\nem<-melt(economics,id=\"date\")\nqplot(date,value,data=em,geom=\"line\",group =variable)+facet_grid(variable ~.,scale=\"free_y\")\n\n\nmpg3 <- within(mpg2,{\n  model <- reorder(model,cty)\n  manufacturer <- reorder(manufacturer,-cty)\n})\nmodels <- qplot(cty,model,data=mpg3)\nmodels\nmodels + facet_grid(manufacturer ~ . ,scales=\"free\",space=\"free\")+theme(strip.text.y = element_text()) #主题设置用来旋转分面标签\n\n#并列与分面\nqplot(color,data=diamonds,geom=\"bar\",fill=cut,position=\"dodge\") #位置调整（Position adjustments）是针对同一图层内元素的位置进行微调的方法。它包括五种设置，分别是stack、dodge、fill、identity、jitter。\nqplot(cut,data=diamonds,geom=\"bar\",fill=cut)+facet_grid(.~color)+theme(axis.text.x=element_text(angle=90,hjust=1,size=8,color=\"grey50\"))\n\n#连续型变量\n#对连续型变量进行分面，需先将其变为离散型\n#将数据分为n个长度相同的部分，用cut_interval(x,n=10),控制划分数目，或用cut_interval(x,length=1)控制每个部分的长度\n#将数据划分为n个有相同数据点的部分，cut_number(x,n=10)\n\nmpg2 <- subset(mpg,cyl!=5 & drv %in% c(\"4\",\"f\"))\nmpg2$disp_ww <- cut_interval(mpg2$displ,length=1) #面板长度为1\nplot <- qplot(cty,hwy,data=mpg2)+labs(x=NULL,y=NULL)\nplot + facet_wrap( ~ disp_ww,nrow=1)\nmpg2$disp_ww <- cut_interval(mpg2$displ,n=6) #每个面板等长\nplot + facet_wrap( ~ disp_ww,nrow=1)\nmpg2$disp_ww <- cut_number(mpg2$displ,n=6)  #每个面板包含数目的点相同\nplot + facet_wrap( ~ disp_ww,nrow=1)\n\n\n#笛卡尔坐标系设置范围\np <- qplot(disp,wt,data=mtcars)+geom_smooth() #完整数据集\np + scale_x_continuous(limits=c(325,500)) #x的标度范文设置为（325,500）,超出范围的数据会删除\np + coord_cartesian(xlim=c(325,500))#坐标系x轴范围为（325,500），使用的是所有数据\n\nd <- ggplot(diamonds,aes(carat,price))+stat_bin2d(bins=25,color=\"grey70\")+theme(legend.position=\"none\")\nd + scale_x_continuous(limits=c(0,2))\nd + coord_cartesian(xlim=c(0,2))\n\n\n#坐标轴翻转\nqplot(displ,cty,data=mpg)+geom_smooth()\nqplot(cty,displ,data=mpg)+geom_smooth()\nqplot(cty,displ,data=mpg)+geom_smooth()+coord_flip()\n\n#坐标轴变换\nqplot(carat,price,data=diamonds,log=\"xy\")+geom_smooth(method=\"lm\") #做了对数变换\nlibrary(scales)\nlast_plot()+coord_trans(x=exp_trans(10),y=exp_trans(10)) #标度还原\n\n\n#非笛卡尔坐标系\n#堆叠条状图\npie <- ggplot(mtcars,aes(x=factor(1),fill=factor(cyl)))+geom_bar(width=1)\n#饼图\npie + coord_polar(theta=\"y\")\n#牛眼图\npie + coord_polar()\n\n----------------------------------------------------------------------------------------------------------\n  ##主题\n  #内置主题\n  theme_gray()使用淡灰色背景和白色网格线\ntheme_bw()使用白色背景和深灰色网格线\n两者都由base_size来控制基础字体的大小\n\n#全局性设置\ntheme_set(theme_grey())或theme_set(theme_bw())\n#局部性设置 只改变单个图形的主题\nqplot()+ theme_grey()\n\nhgram <- qplot(rating,data=movies,binwidth=1)\nhgram\nprevious_theme <- theme_set(theme_bw())\nhgram\nhgram + previous_theme\ntheme_set(previous_theme) #永久性存储初始主体\n\n#主题元素和元素函数\n# element_text()绘制标签和标题，可控制字体的family,face,color,size,hjust,vjust,angle,hineheight\nhgramt <- hgram+labs(title=\"This is a histogram\")\nhgramt\nhgramt + theme(plot.title=element_text(size=20))\nhgramt + theme(plot.title=element_text(size=20,color=\"red\"))\nhgramt + theme(plot.title=element_text(size=20,hjust=0))\nhgramt + theme(plot.title=element_text(size=20,face=\"bold\"))\nhgramt + theme(plot.title=element_text(size=20,angle=180))\n\n# element_line()绘制线条或线段，控制color,size,linetype\nhgram + theme(panel.grid.major=element_line(color=\"red\"))\nhgram + theme(panel.grid.major=element_line(size=2))\nhgram + theme(panel.grid.major=element_line(linetype=\"dotted\"))\nhgram + theme(axis.line=element_line())\nhgram + theme(axis.line=element_line(color=\"red\"))\nhgram + theme(axis.line=element_line(size=0.5,linetype=\"dashed\"))\n\n\n# element_rect()绘制主要供背景使用的矩形，可以控制填充颜色（fill)和边界的color,size,linetype\nhgram + theme(plot.background=element_rect(fill=\"grey80\",color=NA))\nhgram + theme(plot.background=element_rect(size=2))\nhgram + theme(plot.background=element_rect(color=\"red\"))\nhgram + theme(plot.background=element_rect())\nhgram + theme(plot.background=element_rect(color=NA))\nhgram + theme(plot.background=element_rect(linetype=\"dotted\"))\n\n# element_blank()表示空主题，即对元素不分配相应的绘图控件。该函数可以删除我们不感兴趣的绘图元素\n\nlast_plot()+theme(panel.grid.minor=element_blank())\nlast_plot()+theme(panel.grid.major=element_blank())\nlast_plot()+theme(panel.background=element_blank())\nlast_plot()+theme(axis.title.x=element_blank(),axis.title.y=element_blank())\nlast_plot()+theme(axis.line=element_line())\n\n#几何对象和统计变换\n# update_geom_defaults() update_stat_feaults\nupdate_geom_defaults(\"point\",aes(color=\"darkblue\"))\nqplot(mpg,wt,data=mtcars)\nupdate_stat_defaults(\"bin\",aes(y=..density..))\nqplot(rating,data=movies,geom=\"histogram\",binwidth=1)\n\n\n#存储输出\nqplot(mpg,wt,data=mtcars)\nggsave(file=\"output.png\",width=5,height=5)\n\n\n###数据操作\nddply(.data,.(variables),.fun,...)\n#取子集 subset()\nrequire(\"plyr\") require(ggplot2)\nddply(diamonds,.(color),subset,carat==min(carat))#选取各颜色里最小的\nddply(diamonds,.(color),subset,order(carat)<=2)#选最小的两颗\nddply(diamonds,.(color),subset,carat>quantile(carat,0.99))#选取每组里面大小为前1%的钻石\nddply(diamonds,.(color),subset,price>mean(price))#选出所有比组平均值大的钻石\n\n#进行数据变换 transform()\nddply(diamonds,.(color),transform,price=scale(price))#把每个颜色组里钻石的价格标准化，使其均值为0，方差为1\nddply(diamonds,.(color),transform,price=price-mean(price))# 减去组均值\n\n#绘图模板\ngradient_rb <- scale_color_gradient(low=\"red\",high=\"blue\")\nqplot(cty,hwy,data=mpg,color=displ)+gradient_rb\nqplot(bodywt,brainwt,data=msleep,color=awake,log=\"xy\")+gradient_rb\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
    "created" : 1451283427440.000,
    "dirty" : false,
    "encoding" : "GB18030",
    "folds" : "",
    "hash" : "2221397435",
    "id" : "6EECB09",
    "lastKnownWriteTime" : 1451283452,
    "path" : "E:/01-我的文档/GitHub/ggplot/ggplot2.R",
    "project_path" : "ggplot2.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : false,
    "type" : "r_source"
}